CURSO AVANÇADO DE ANGULAR MASTER DETAIL

AULA 5 - Baixando as dependencias do projeto

* criação do projeto:  
ng new finansys

* instalação do bootstrap e jquery: 
npm i bootstrap jquery --save

* imask - mascaras diversas
npm install angular-imask

* currency formatter - conversao de valores
npm i currency-formatter --save

* moment - manipulacao de datas
npm install moment --save

* toastr - mostra mensagens bonitas na tela
npm i toastr --save

* primeng - primefaces para angular
npm install primeng --save
npm install primeicons --save

* chart.js - componente de graficos
npm install chart.js --save

* in-memory-web-api - API fake do back end
npm i --save angular-in-memory-web-api 
------------------------------------------------------

*** deu pau no git ao tentar sincronizar o git local com o repositorio criado
diretamente no github. Foi consertado com o comando:

git pull --allow-unrelated-histories
------------------------------------------------------
AULA 9 - Criando modulo de categorias

ng g m pages/categories --routing

ng g c pages/categories/category-list

ng g c pages/categories/category-form

MASTER = category-list
DETAIL = category-form

* Em app-routing.module.ts, adicionou a rota:

const routes: Routes = [
	{path: 'categories', loadChildren: './pages/categories/categories.module#CategoriesModule}
];

* Em categories-routing.module.ts, adicionou as rotas:

const routes: Routes = [

{path: '', component: CategoryListComponent},
{path: 'new', component: CategoryFormComponent}
{path: ':id/edit', component: CategoryFormComponent}

];
--------------------------------------------------------

AULA 10 - Adicionando barra de navegacao

--------------------------------------------------------

AULA 11 - Implementando o template category-list

Criou o template aplicando css no "category-list.component.html
--------------------------------------------------------

AULA 12 - Adicionando 'in-memory-web-api' p/ categorias

Na pasta app/pages, crie o arquivo in-memory-database.ts
---------------------------------------------------------

AULA 13 - Adicionando o model 'Category'

criou a pasta 'shared' e dentro dela o 'category.model.ts'.
---------------------------------------------------------

AULA 14 - Adicionando o servico CategoryService

ng g s  pages/categories/shared/category  -> criou o servico CategoryService.ts

Criou o servico CategoryService.ts que contem as 4 operacoes do crud.
----------------------------------------------------------

AULA 15 - Ativando o interceptador HTTP do AngularinMemoryWebAPI

Tem que avisar o angular que é pra fazer a busca na memoria, e nao
numa API real.

Em app.module.ts, importou o angular...memoryWebAPI.

app.module.ts:

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    /*
    Interceptacao para as requisicoes http serem feitas com o banco em memoria.
    quando for usar api real, comentar ou apagar o arquivo "InMemoryDatabase".
    */
    HttpClientInMemoryWebApiModule.forRoot(InMemoryDatabase)
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
--------------------------------------------------------

AULA 16 - Concluindo a implementacao do CategoryList

Criou os metodos do service no component e ajustou na tela.

AULA 17 - Implementando o template do componente CategoryFormComponent}

AULA 18 - Implementando a base da classe CategoryForm

	* codificou toda a classe category-form.component.ts
	
	* Em categories.module.ts, importe:
	
		import {ReactiveFormsModule} from '@angular/forms';
	
	* E nos imports do ngmodule, insira: ReactiveFormsModule.

	* Em category-form.component.html, na tag "form", antes de
	"Informacoes sobre a categoria", insira:

	[formGroup] = "categoryForm"
	
-----------------------------------------------------------------------

AULA 19 - Concluindo Categoryform

- criou metodo submitForm() em category-form.component.ts
- criou actionForSuccess(), updateCategory(), createCategory(), actionsForError()
----------------------------------------------------------------------------------------------------
AULA 21 - Adicionando o modulo de receitas e despesas


- criou folder entries/shared/
- criou arquivo entry.model.ts
---------------------------------------------------------------------------------------------------
AULA 22 - Adicionando a lista receitas e despesas

- copiou a pasta category-list de pages/categories para entries. Renomeou-a para entry-list.

substituicoes:
	- Category -> Entry
	- categories -> entries
	- category -> entry

- colocou o array de entries no arquivo in-memory-database.ts:

private jsonDataToEntries(jsonData: any[]): Entry[]{
	console.log(jsonData[0] as Entry);
	console.log(Object.assign(new Entry(), jsonData[0]));
	
	const entries: Entry[] = [];
	
	jsonData.foreach(element => {
		const entry = Object.assign(new Entry(), element);
		entries.push(entry);
	});
	return entries;
}

O método acima transforma um objeto Object em um objeto Entry.
Assim, dá para ler o metodo paidText() na classe EntryModel.
------------------------------------------------------------------------------------------------------------

AULA 23 - Adicionando o formulario de receitas e despesas

- copiou a pasta category/category-form para a pasta entries.
- renomeou os arquivos de 'category' para 'entry'.
- Trocou os nomes de tudo que tinha Category, category, categories, categories, para, respectivamente, Entry, entry, etc...
- em entries.modules.ts, adicionou 'EntryFormComponent' em declarations.

- Em entry.form.component.ts, aplicou col-md-9 e col-md-3, para o titulo da pagina e o botao de voltar.
-------------------------------------------------------------------------------------------------------------

proxima = AULA 24 - Melhorando o EntryForm




















 

